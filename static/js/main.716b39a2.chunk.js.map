{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["vals","a","i","length","j","Math","floor","random","shuffle","Square","props","state","clicked","handleClick","bind","handleChange","this","setState","Col","className","val","rows","placeholder","onChange","onClick","React","Component","BingoRow","first","rowNum","second","third","fourth","fifth","Row","App","id","style","Container","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.716b39a2.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport './bootstrap.min.css';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\n\nfunction shuffle(a) {\n\tfor (let i = a.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t[a[i], a[j]] = [a[j], a[i]];\n\t}\n\treturn a;\n}\nvar vals = [\n\t'Knows how to ski or snowboard',\n\t'Has more than 2 siblings',\n\t'Read a book over break (which one?)',\n\t'Plays an instrument (what instrument?)',\n\t'Plays a sport (what sport?)',\n\t'Can speak and read another language',\n\t'Took up a new hobby in 2020 (what hobby?)',\n\t'Has an awful sleeping schedule',\n\t'Prefers summer over winter',\n\t'Is lactose intolerant',\n\t'Is left-handed',\n\t'Baked/cooked something new in 2020',\n\t'Is born in February',\n\t'First time coding at KWK',\n\t'Prefers light mode',\n\t'Has a pet',\n\t'Prefers vanilla over chocolate',\n\t'Loves sushi',\n\t'Prefers Andriod over Apple',\n\t'Knows how to embroider/knit/crochet',\n\t'Prefers coffee over tea',\n\t'Has overslept a Zoom class',\n\t'Goes to class in PJs',\n\t'Has cut their own hair or bangs',\n];\n\nshuffle(vals);\n\nclass Square extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { clicked: false };\n\t\tthis.handleClick = this.handleClick.bind(this);\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\thandleClick() {\n\t\tif (this.state.clicked === true) {\n\t\t\tthis.setState({ clicked: false });\n\t\t}\n\t}\n\n\thandleChange() {\n\t\tthis.setState({ clicked: true });\n\t}\n\n\trender() {\n\t\tif (this.state.clicked === false) {\n\t\t\treturn (\n\t\t\t\t<Col className=\"d-flex flex-column square px-1\">\n\t\t\t\t\t<p>{this.props.val}</p>\n\t\t\t\t\t<textarea rows=\"2\" placeholder=\"who did you meet?\" onChange={this.handleChange}></textarea>\n\t\t\t\t</Col>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Col className=\"d-flex flex-column square clicked px-1\" onClick={this.handleClick}>\n\t\t\t\t\t<p>{this.props.val}</p>\n\t\t\t\t\t<textarea rows=\"2\" placeholder=\"who did you meet?\" onChange={this.handleChange}></textarea>\n\t\t\t\t</Col>\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass BingoRow extends React.Component {\n\trender() {\n\t\tvar first = vals[this.props.rowNum * 5];\n\t\tvar second = vals[this.props.rowNum * 5 + 1];\n\t\tvar third = vals[this.props.rowNum * 5 + 2];\n\t\tvar fourth = vals[this.props.rowNum * 5 + 3];\n\t\tvar fifth = vals[this.props.rowNum * 5 + 4];\n\n\t\tif (this.props.rowNum === 2) {\n\t\t\tthird = 'Loves KWK Campus (Free aka You!)';\n\t\t}\n\t\tif (this.props.rowNum === 4) {\n\t\t\tfifth = vals[12];\n\t\t}\n\n\t\treturn (\n\t\t\t<Row>\n\t\t\t\t<Square val={first} />\n\t\t\t\t<Square val={second} />\n\t\t\t\t<Square val={third} />\n\t\t\t\t<Square val={fourth} />\n\t\t\t\t<Square val={fifth} />\n\t\t\t</Row>\n\t\t);\n\t}\n}\n\nexport class App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App container text-center my-sm-3\">\n\t\t\t\t<div className=\"title\">\n\t\t\t\t\t<h1 className=\"asa\" id=\"title\">\n\t\t\t\t\t\t\tKWK Icebreaker Bingo\n\t\t\t\t\t</h1>\n\t\t\t\t\t<h6 style={{\"font-weight\":\"bold\"}}>Try to find a scholar that's described by each box!</h6>\n\t\t\t\t\t<h6 style={{\"font-weight\":\"bold\"}}>Drop a screenshot of your bingo in the slack thread to get special prize :)</h6>\n\t\t\t\t</div>\n\t\t\t\t<Container className=\"mb-3\">\n\t\t\t\t\t<BingoRow rowNum={0} />\n\t\t\t\t\t<BingoRow rowNum={1} />\n\t\t\t\t\t<BingoRow rowNum={2} />\n\t\t\t\t\t<BingoRow rowNum={3} />\n\t\t\t\t\t<BingoRow rowNum={4} />\n\t\t\t\t</Container>\n\t\t\t\t<footer>\n\t\t\t\t\t<hr width=\"80%\" />\n\t\t\t\t\t<p>Adapted by Kimberly Gao from Phi Henry Nguyen</p>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}